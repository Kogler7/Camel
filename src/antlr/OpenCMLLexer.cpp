
// Generated from OpenCML.g4 by ANTLR 4.13.1


#include "OpenCMLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct OpenCMLLexerStaticData final {
  OpenCMLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  OpenCMLLexerStaticData(const OpenCMLLexerStaticData&) = delete;
  OpenCMLLexerStaticData(OpenCMLLexerStaticData&&) = delete;
  OpenCMLLexerStaticData& operator=(const OpenCMLLexerStaticData&) = delete;
  OpenCMLLexerStaticData& operator=(OpenCMLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag opencmllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
OpenCMLLexerStaticData *opencmllexerLexerStaticData = nullptr;

void opencmllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (opencmllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(opencmllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<OpenCMLLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "SEP", "AS", "IS", "LET", "USE", "FUNC", "TYPE", 
      "WITH", "RETURN", "INNER", "OUTER", "ATOMIC", "STATIC", "SYNC", "NULL", 
      "TRUE", "FALSE", "INTEGER_TYPE", "INTEGER32_TYPE", "INTEGER64_TYPE", 
      "REAL_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "NUMBER_TYPE", "STRING_TYPE", 
      "BOOL_TYPE", "CHAR_TYPE", "SET_TYPE", "MAP_TYPE", "LIST_TYPE", "DICT_TYPE", 
      "ARRAY_TYPE", "TUPLE_TYPE", "UNION_TYPE", "VECTOR_TYPE", "TENSOR_TYPE", 
      "ANY_TYPE", "VOID_TYPE", "FUNCTOR_TYPE", "BLANK", "LIN_CMT1", "LIN_CMT2", 
      "BLK_CMT", "MULTI_STR", "IDENTIFIER", "UNIT", "STRING", "FSTRING", 
      "INTEGER", "REAL", "DECIMAL", "OCTAL", "HEXADECIMAL", "BINARY", "FLOAT", 
      "EXPONENT_FLOAT", "EXPONENT_DECIMAL", "EXPONENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "':'", "'='", "':='", "'::'", "'=>'", "'@'", "'['", "']'", "','", 
      "'{'", "'}'", "'('", "')'", "'<'", "'>'", "'->'", "'.'", "'...'", 
      "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<='", 
      "'>='", "'=='", "'!='", "'&&'", "'||'", "'+'", "'-'", "'&'", "'|'", 
      "'^'", "'*'", "'/'", "'%'", "'!'", "'++'", "'--'", "';'", "'as'", 
      "'is'", "'let'", "'use'", "'func'", "'type'", "'with'", "'return'", 
      "'inner'", "'outer'", "'atomic'", "'static'", "'sync'", "'null'", 
      "'true'", "'false'", "'Int'", "'Int32'", "'Int64'", "'Real'", "'Float'", 
      "'Double'", "'Number'", "'String'", "'Bool'", "'Char'", "'Set'", "'Map'", 
      "'List'", "'Dict'", "'Array'", "'Tuple'", "'Union'", "'Vector'", "'Tensor'", 
      "'Any'", "'Void'", "'Functor'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "SEP", "AS", "IS", "LET", 
      "USE", "FUNC", "TYPE", "WITH", "RETURN", "INNER", "OUTER", "ATOMIC", 
      "STATIC", "SYNC", "NULL", "TRUE", "FALSE", "INTEGER_TYPE", "INTEGER32_TYPE", 
      "INTEGER64_TYPE", "REAL_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "NUMBER_TYPE", 
      "STRING_TYPE", "BOOL_TYPE", "CHAR_TYPE", "SET_TYPE", "MAP_TYPE", "LIST_TYPE", 
      "DICT_TYPE", "ARRAY_TYPE", "TUPLE_TYPE", "UNION_TYPE", "VECTOR_TYPE", 
      "TENSOR_TYPE", "ANY_TYPE", "VOID_TYPE", "FUNCTOR_TYPE", "BLANK", "LIN_CMT1", 
      "LIN_CMT2", "BLK_CMT", "MULTI_STR", "IDENTIFIER", "UNIT", "STRING", 
      "FSTRING", "INTEGER", "REAL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,93,725,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
  	1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,
  	1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
  	1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
  	1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
  	1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
  	1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,
  	1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,
  	1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,
  	1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,
  	1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,
  	1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,
  	1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,
  	1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,
  	1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,
  	1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,
  	1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,73,
  	1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,
  	1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,
  	1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,
  	1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,82,4,82,523,
  	8,82,11,82,12,82,524,1,82,1,82,1,83,1,83,1,83,1,83,5,83,533,8,83,10,83,
  	12,83,536,9,83,1,83,1,83,1,84,1,84,1,84,1,84,5,84,544,8,84,10,84,12,84,
  	547,9,84,1,84,1,84,1,85,1,85,1,85,1,85,5,85,555,8,85,10,85,12,85,558,
  	9,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,5,86,570,8,86,
  	10,86,12,86,573,9,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,583,
  	8,86,10,86,12,86,586,9,86,1,86,1,86,1,86,3,86,591,8,86,1,87,1,87,5,87,
  	595,8,87,10,87,12,87,598,9,87,1,88,1,88,1,88,1,88,1,88,1,88,5,88,606,
  	8,88,10,88,12,88,609,9,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,5,89,
  	619,8,89,10,89,12,89,622,9,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,
  	631,8,89,10,89,12,89,634,9,89,1,89,3,89,637,8,89,1,90,1,90,1,90,1,91,
  	1,91,1,91,1,91,1,91,3,91,647,8,91,1,92,1,92,3,92,651,8,92,1,93,3,93,654,
  	8,93,1,93,1,93,5,93,658,8,93,10,93,12,93,661,9,93,1,93,3,93,664,8,93,
  	1,94,3,94,667,8,94,1,94,1,94,4,94,671,8,94,11,94,12,94,672,1,95,3,95,
  	676,8,95,1,95,1,95,1,95,1,95,4,95,682,8,95,11,95,12,95,683,1,96,3,96,
  	687,8,96,1,96,1,96,1,96,1,96,4,96,693,8,96,11,96,12,96,694,1,97,3,97,
  	698,8,97,1,97,4,97,701,8,97,11,97,12,97,702,1,97,1,97,4,97,707,8,97,11,
  	97,12,97,708,1,98,1,98,1,98,1,99,1,99,1,99,1,100,1,100,3,100,719,8,100,
  	1,100,4,100,722,8,100,11,100,12,100,723,6,556,571,584,607,620,632,0,101,
  	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
  	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
  	26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
  	75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
  	49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
  	59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,
  	69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,
  	79,159,80,161,81,163,82,165,83,167,84,169,85,171,86,173,87,175,88,177,
  	89,179,90,181,91,183,92,185,93,187,0,189,0,191,0,193,0,195,0,197,0,199,
  	0,201,0,1,0,12,3,0,9,10,12,13,32,32,2,0,10,10,12,13,2,0,10,10,13,13,3,
  	0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,43,43,45,45,1,0,
  	49,57,1,0,48,57,1,0,48,55,3,0,48,57,65,70,97,102,1,0,48,49,2,0,69,69,
  	101,101,753,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
  	0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
  	21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
  	0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
  	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
  	53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
  	0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
  	0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
  	85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
  	0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
  	0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
  	0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
  	0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,
  	0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,
  	0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,
  	0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,
  	0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,
  	0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,
  	0,0,1,203,1,0,0,0,3,205,1,0,0,0,5,207,1,0,0,0,7,210,1,0,0,0,9,213,1,0,
  	0,0,11,216,1,0,0,0,13,218,1,0,0,0,15,220,1,0,0,0,17,222,1,0,0,0,19,224,
  	1,0,0,0,21,226,1,0,0,0,23,228,1,0,0,0,25,230,1,0,0,0,27,232,1,0,0,0,29,
  	234,1,0,0,0,31,236,1,0,0,0,33,239,1,0,0,0,35,241,1,0,0,0,37,245,1,0,0,
  	0,39,248,1,0,0,0,41,251,1,0,0,0,43,254,1,0,0,0,45,257,1,0,0,0,47,260,
  	1,0,0,0,49,263,1,0,0,0,51,266,1,0,0,0,53,269,1,0,0,0,55,272,1,0,0,0,57,
  	275,1,0,0,0,59,278,1,0,0,0,61,281,1,0,0,0,63,284,1,0,0,0,65,287,1,0,0,
  	0,67,289,1,0,0,0,69,291,1,0,0,0,71,293,1,0,0,0,73,295,1,0,0,0,75,297,
  	1,0,0,0,77,299,1,0,0,0,79,301,1,0,0,0,81,303,1,0,0,0,83,305,1,0,0,0,85,
  	308,1,0,0,0,87,311,1,0,0,0,89,313,1,0,0,0,91,316,1,0,0,0,93,319,1,0,0,
  	0,95,323,1,0,0,0,97,327,1,0,0,0,99,332,1,0,0,0,101,337,1,0,0,0,103,342,
  	1,0,0,0,105,349,1,0,0,0,107,355,1,0,0,0,109,361,1,0,0,0,111,368,1,0,0,
  	0,113,375,1,0,0,0,115,380,1,0,0,0,117,385,1,0,0,0,119,390,1,0,0,0,121,
  	396,1,0,0,0,123,400,1,0,0,0,125,406,1,0,0,0,127,412,1,0,0,0,129,417,1,
  	0,0,0,131,423,1,0,0,0,133,430,1,0,0,0,135,437,1,0,0,0,137,444,1,0,0,0,
  	139,449,1,0,0,0,141,454,1,0,0,0,143,458,1,0,0,0,145,462,1,0,0,0,147,467,
  	1,0,0,0,149,472,1,0,0,0,151,478,1,0,0,0,153,484,1,0,0,0,155,490,1,0,0,
  	0,157,497,1,0,0,0,159,504,1,0,0,0,161,508,1,0,0,0,163,513,1,0,0,0,165,
  	522,1,0,0,0,167,528,1,0,0,0,169,539,1,0,0,0,171,550,1,0,0,0,173,590,1,
  	0,0,0,175,592,1,0,0,0,177,599,1,0,0,0,179,636,1,0,0,0,181,638,1,0,0,0,
  	183,646,1,0,0,0,185,650,1,0,0,0,187,653,1,0,0,0,189,666,1,0,0,0,191,675,
  	1,0,0,0,193,686,1,0,0,0,195,697,1,0,0,0,197,710,1,0,0,0,199,713,1,0,0,
  	0,201,716,1,0,0,0,203,204,5,58,0,0,204,2,1,0,0,0,205,206,5,61,0,0,206,
  	4,1,0,0,0,207,208,5,58,0,0,208,209,5,61,0,0,209,6,1,0,0,0,210,211,5,58,
  	0,0,211,212,5,58,0,0,212,8,1,0,0,0,213,214,5,61,0,0,214,215,5,62,0,0,
  	215,10,1,0,0,0,216,217,5,64,0,0,217,12,1,0,0,0,218,219,5,91,0,0,219,14,
  	1,0,0,0,220,221,5,93,0,0,221,16,1,0,0,0,222,223,5,44,0,0,223,18,1,0,0,
  	0,224,225,5,123,0,0,225,20,1,0,0,0,226,227,5,125,0,0,227,22,1,0,0,0,228,
  	229,5,40,0,0,229,24,1,0,0,0,230,231,5,41,0,0,231,26,1,0,0,0,232,233,5,
  	60,0,0,233,28,1,0,0,0,234,235,5,62,0,0,235,30,1,0,0,0,236,237,5,45,0,
  	0,237,238,5,62,0,0,238,32,1,0,0,0,239,240,5,46,0,0,240,34,1,0,0,0,241,
  	242,5,46,0,0,242,243,5,46,0,0,243,244,5,46,0,0,244,36,1,0,0,0,245,246,
  	5,43,0,0,246,247,5,61,0,0,247,38,1,0,0,0,248,249,5,45,0,0,249,250,5,61,
  	0,0,250,40,1,0,0,0,251,252,5,42,0,0,252,253,5,61,0,0,253,42,1,0,0,0,254,
  	255,5,47,0,0,255,256,5,61,0,0,256,44,1,0,0,0,257,258,5,37,0,0,258,259,
  	5,61,0,0,259,46,1,0,0,0,260,261,5,94,0,0,261,262,5,61,0,0,262,48,1,0,
  	0,0,263,264,5,38,0,0,264,265,5,61,0,0,265,50,1,0,0,0,266,267,5,124,0,
  	0,267,268,5,61,0,0,268,52,1,0,0,0,269,270,5,60,0,0,270,271,5,61,0,0,271,
  	54,1,0,0,0,272,273,5,62,0,0,273,274,5,61,0,0,274,56,1,0,0,0,275,276,5,
  	61,0,0,276,277,5,61,0,0,277,58,1,0,0,0,278,279,5,33,0,0,279,280,5,61,
  	0,0,280,60,1,0,0,0,281,282,5,38,0,0,282,283,5,38,0,0,283,62,1,0,0,0,284,
  	285,5,124,0,0,285,286,5,124,0,0,286,64,1,0,0,0,287,288,5,43,0,0,288,66,
  	1,0,0,0,289,290,5,45,0,0,290,68,1,0,0,0,291,292,5,38,0,0,292,70,1,0,0,
  	0,293,294,5,124,0,0,294,72,1,0,0,0,295,296,5,94,0,0,296,74,1,0,0,0,297,
  	298,5,42,0,0,298,76,1,0,0,0,299,300,5,47,0,0,300,78,1,0,0,0,301,302,5,
  	37,0,0,302,80,1,0,0,0,303,304,5,33,0,0,304,82,1,0,0,0,305,306,5,43,0,
  	0,306,307,5,43,0,0,307,84,1,0,0,0,308,309,5,45,0,0,309,310,5,45,0,0,310,
  	86,1,0,0,0,311,312,5,59,0,0,312,88,1,0,0,0,313,314,5,97,0,0,314,315,5,
  	115,0,0,315,90,1,0,0,0,316,317,5,105,0,0,317,318,5,115,0,0,318,92,1,0,
  	0,0,319,320,5,108,0,0,320,321,5,101,0,0,321,322,5,116,0,0,322,94,1,0,
  	0,0,323,324,5,117,0,0,324,325,5,115,0,0,325,326,5,101,0,0,326,96,1,0,
  	0,0,327,328,5,102,0,0,328,329,5,117,0,0,329,330,5,110,0,0,330,331,5,99,
  	0,0,331,98,1,0,0,0,332,333,5,116,0,0,333,334,5,121,0,0,334,335,5,112,
  	0,0,335,336,5,101,0,0,336,100,1,0,0,0,337,338,5,119,0,0,338,339,5,105,
  	0,0,339,340,5,116,0,0,340,341,5,104,0,0,341,102,1,0,0,0,342,343,5,114,
  	0,0,343,344,5,101,0,0,344,345,5,116,0,0,345,346,5,117,0,0,346,347,5,114,
  	0,0,347,348,5,110,0,0,348,104,1,0,0,0,349,350,5,105,0,0,350,351,5,110,
  	0,0,351,352,5,110,0,0,352,353,5,101,0,0,353,354,5,114,0,0,354,106,1,0,
  	0,0,355,356,5,111,0,0,356,357,5,117,0,0,357,358,5,116,0,0,358,359,5,101,
  	0,0,359,360,5,114,0,0,360,108,1,0,0,0,361,362,5,97,0,0,362,363,5,116,
  	0,0,363,364,5,111,0,0,364,365,5,109,0,0,365,366,5,105,0,0,366,367,5,99,
  	0,0,367,110,1,0,0,0,368,369,5,115,0,0,369,370,5,116,0,0,370,371,5,97,
  	0,0,371,372,5,116,0,0,372,373,5,105,0,0,373,374,5,99,0,0,374,112,1,0,
  	0,0,375,376,5,115,0,0,376,377,5,121,0,0,377,378,5,110,0,0,378,379,5,99,
  	0,0,379,114,1,0,0,0,380,381,5,110,0,0,381,382,5,117,0,0,382,383,5,108,
  	0,0,383,384,5,108,0,0,384,116,1,0,0,0,385,386,5,116,0,0,386,387,5,114,
  	0,0,387,388,5,117,0,0,388,389,5,101,0,0,389,118,1,0,0,0,390,391,5,102,
  	0,0,391,392,5,97,0,0,392,393,5,108,0,0,393,394,5,115,0,0,394,395,5,101,
  	0,0,395,120,1,0,0,0,396,397,5,73,0,0,397,398,5,110,0,0,398,399,5,116,
  	0,0,399,122,1,0,0,0,400,401,5,73,0,0,401,402,5,110,0,0,402,403,5,116,
  	0,0,403,404,5,51,0,0,404,405,5,50,0,0,405,124,1,0,0,0,406,407,5,73,0,
  	0,407,408,5,110,0,0,408,409,5,116,0,0,409,410,5,54,0,0,410,411,5,52,0,
  	0,411,126,1,0,0,0,412,413,5,82,0,0,413,414,5,101,0,0,414,415,5,97,0,0,
  	415,416,5,108,0,0,416,128,1,0,0,0,417,418,5,70,0,0,418,419,5,108,0,0,
  	419,420,5,111,0,0,420,421,5,97,0,0,421,422,5,116,0,0,422,130,1,0,0,0,
  	423,424,5,68,0,0,424,425,5,111,0,0,425,426,5,117,0,0,426,427,5,98,0,0,
  	427,428,5,108,0,0,428,429,5,101,0,0,429,132,1,0,0,0,430,431,5,78,0,0,
  	431,432,5,117,0,0,432,433,5,109,0,0,433,434,5,98,0,0,434,435,5,101,0,
  	0,435,436,5,114,0,0,436,134,1,0,0,0,437,438,5,83,0,0,438,439,5,116,0,
  	0,439,440,5,114,0,0,440,441,5,105,0,0,441,442,5,110,0,0,442,443,5,103,
  	0,0,443,136,1,0,0,0,444,445,5,66,0,0,445,446,5,111,0,0,446,447,5,111,
  	0,0,447,448,5,108,0,0,448,138,1,0,0,0,449,450,5,67,0,0,450,451,5,104,
  	0,0,451,452,5,97,0,0,452,453,5,114,0,0,453,140,1,0,0,0,454,455,5,83,0,
  	0,455,456,5,101,0,0,456,457,5,116,0,0,457,142,1,0,0,0,458,459,5,77,0,
  	0,459,460,5,97,0,0,460,461,5,112,0,0,461,144,1,0,0,0,462,463,5,76,0,0,
  	463,464,5,105,0,0,464,465,5,115,0,0,465,466,5,116,0,0,466,146,1,0,0,0,
  	467,468,5,68,0,0,468,469,5,105,0,0,469,470,5,99,0,0,470,471,5,116,0,0,
  	471,148,1,0,0,0,472,473,5,65,0,0,473,474,5,114,0,0,474,475,5,114,0,0,
  	475,476,5,97,0,0,476,477,5,121,0,0,477,150,1,0,0,0,478,479,5,84,0,0,479,
  	480,5,117,0,0,480,481,5,112,0,0,481,482,5,108,0,0,482,483,5,101,0,0,483,
  	152,1,0,0,0,484,485,5,85,0,0,485,486,5,110,0,0,486,487,5,105,0,0,487,
  	488,5,111,0,0,488,489,5,110,0,0,489,154,1,0,0,0,490,491,5,86,0,0,491,
  	492,5,101,0,0,492,493,5,99,0,0,493,494,5,116,0,0,494,495,5,111,0,0,495,
  	496,5,114,0,0,496,156,1,0,0,0,497,498,5,84,0,0,498,499,5,101,0,0,499,
  	500,5,110,0,0,500,501,5,115,0,0,501,502,5,111,0,0,502,503,5,114,0,0,503,
  	158,1,0,0,0,504,505,5,65,0,0,505,506,5,110,0,0,506,507,5,121,0,0,507,
  	160,1,0,0,0,508,509,5,86,0,0,509,510,5,111,0,0,510,511,5,105,0,0,511,
  	512,5,100,0,0,512,162,1,0,0,0,513,514,5,70,0,0,514,515,5,117,0,0,515,
  	516,5,110,0,0,516,517,5,99,0,0,517,518,5,116,0,0,518,519,5,111,0,0,519,
  	520,5,114,0,0,520,164,1,0,0,0,521,523,7,0,0,0,522,521,1,0,0,0,523,524,
  	1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,6,82,
  	0,0,527,166,1,0,0,0,528,529,5,35,0,0,529,530,5,32,0,0,530,534,1,0,0,0,
  	531,533,8,1,0,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,
  	1,0,0,0,535,537,1,0,0,0,536,534,1,0,0,0,537,538,6,83,1,0,538,168,1,0,
  	0,0,539,540,5,47,0,0,540,541,5,47,0,0,541,545,1,0,0,0,542,544,8,2,0,0,
  	543,542,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,548,
  	1,0,0,0,547,545,1,0,0,0,548,549,6,84,1,0,549,170,1,0,0,0,550,551,5,47,
  	0,0,551,552,5,42,0,0,552,556,1,0,0,0,553,555,9,0,0,0,554,553,1,0,0,0,
  	555,558,1,0,0,0,556,557,1,0,0,0,556,554,1,0,0,0,557,559,1,0,0,0,558,556,
  	1,0,0,0,559,560,5,42,0,0,560,561,5,47,0,0,561,562,1,0,0,0,562,563,6,85,
  	1,0,563,172,1,0,0,0,564,565,5,39,0,0,565,566,5,39,0,0,566,567,5,39,0,
  	0,567,571,1,0,0,0,568,570,9,0,0,0,569,568,1,0,0,0,570,573,1,0,0,0,571,
  	572,1,0,0,0,571,569,1,0,0,0,572,574,1,0,0,0,573,571,1,0,0,0,574,575,5,
  	39,0,0,575,576,5,39,0,0,576,591,5,39,0,0,577,578,5,34,0,0,578,579,5,34,
  	0,0,579,580,5,34,0,0,580,584,1,0,0,0,581,583,9,0,0,0,582,581,1,0,0,0,
  	583,586,1,0,0,0,584,585,1,0,0,0,584,582,1,0,0,0,585,587,1,0,0,0,586,584,
  	1,0,0,0,587,588,5,34,0,0,588,589,5,34,0,0,589,591,5,34,0,0,590,564,1,
  	0,0,0,590,577,1,0,0,0,591,174,1,0,0,0,592,596,7,3,0,0,593,595,7,4,0,0,
  	594,593,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,176,
  	1,0,0,0,598,596,1,0,0,0,599,607,5,96,0,0,600,601,5,92,0,0,601,606,5,96,
  	0,0,602,603,5,92,0,0,603,606,5,92,0,0,604,606,9,0,0,0,605,600,1,0,0,0,
  	605,602,1,0,0,0,605,604,1,0,0,0,606,609,1,0,0,0,607,608,1,0,0,0,607,605,
  	1,0,0,0,608,610,1,0,0,0,609,607,1,0,0,0,610,611,5,96,0,0,611,178,1,0,
  	0,0,612,620,5,34,0,0,613,614,5,92,0,0,614,619,5,34,0,0,615,616,5,92,0,
  	0,616,619,5,92,0,0,617,619,9,0,0,0,618,613,1,0,0,0,618,615,1,0,0,0,618,
  	617,1,0,0,0,619,622,1,0,0,0,620,621,1,0,0,0,620,618,1,0,0,0,621,623,1,
  	0,0,0,622,620,1,0,0,0,623,637,5,34,0,0,624,632,5,39,0,0,625,626,5,92,
  	0,0,626,631,5,39,0,0,627,628,5,92,0,0,628,631,5,92,0,0,629,631,9,0,0,
  	0,630,625,1,0,0,0,630,627,1,0,0,0,630,629,1,0,0,0,631,634,1,0,0,0,632,
  	633,1,0,0,0,632,630,1,0,0,0,633,635,1,0,0,0,634,632,1,0,0,0,635,637,5,
  	39,0,0,636,612,1,0,0,0,636,624,1,0,0,0,637,180,1,0,0,0,638,639,5,102,
  	0,0,639,640,3,179,89,0,640,182,1,0,0,0,641,647,3,187,93,0,642,647,3,189,
  	94,0,643,647,3,191,95,0,644,647,3,193,96,0,645,647,3,199,99,0,646,641,
  	1,0,0,0,646,642,1,0,0,0,646,643,1,0,0,0,646,644,1,0,0,0,646,645,1,0,0,
  	0,647,184,1,0,0,0,648,651,3,195,97,0,649,651,3,197,98,0,650,648,1,0,0,
  	0,650,649,1,0,0,0,651,186,1,0,0,0,652,654,7,5,0,0,653,652,1,0,0,0,653,
  	654,1,0,0,0,654,663,1,0,0,0,655,659,7,6,0,0,656,658,7,7,0,0,657,656,1,
  	0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,664,1,0,0,0,
  	661,659,1,0,0,0,662,664,5,48,0,0,663,655,1,0,0,0,663,662,1,0,0,0,664,
  	188,1,0,0,0,665,667,7,5,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,1,
  	0,0,0,668,670,5,48,0,0,669,671,7,8,0,0,670,669,1,0,0,0,671,672,1,0,0,
  	0,672,670,1,0,0,0,672,673,1,0,0,0,673,190,1,0,0,0,674,676,7,5,0,0,675,
  	674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,678,5,48,0,0,678,679,
  	5,120,0,0,679,681,1,0,0,0,680,682,7,9,0,0,681,680,1,0,0,0,682,683,1,0,
  	0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,192,1,0,0,0,685,687,7,5,0,0,686,
  	685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,689,5,48,0,0,689,690,
  	5,98,0,0,690,692,1,0,0,0,691,693,7,10,0,0,692,691,1,0,0,0,693,694,1,0,
  	0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,194,1,0,0,0,696,698,7,5,0,0,697,
  	696,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,701,7,7,0,0,700,699,1,
  	0,0,0,701,702,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,
  	704,706,5,46,0,0,705,707,7,7,0,0,706,705,1,0,0,0,707,708,1,0,0,0,708,
  	706,1,0,0,0,708,709,1,0,0,0,709,196,1,0,0,0,710,711,3,195,97,0,711,712,
  	3,201,100,0,712,198,1,0,0,0,713,714,3,187,93,0,714,715,3,201,100,0,715,
  	200,1,0,0,0,716,718,7,11,0,0,717,719,7,5,0,0,718,717,1,0,0,0,718,719,
  	1,0,0,0,719,721,1,0,0,0,720,722,7,7,0,0,721,720,1,0,0,0,722,723,1,0,0,
  	0,723,721,1,0,0,0,723,724,1,0,0,0,724,202,1,0,0,0,32,0,524,534,545,556,
  	571,584,590,596,605,607,618,620,630,632,636,646,650,653,659,663,666,672,
  	675,683,686,694,697,702,708,718,723,2,6,0,0,0,2,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  opencmllexerLexerStaticData = staticData.release();
}

}

OpenCMLLexer::OpenCMLLexer(CharStream *input) : Lexer(input) {
  OpenCMLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *opencmllexerLexerStaticData->atn, opencmllexerLexerStaticData->decisionToDFA, opencmllexerLexerStaticData->sharedContextCache);
}

OpenCMLLexer::~OpenCMLLexer() {
  delete _interpreter;
}

std::string OpenCMLLexer::getGrammarFileName() const {
  return "OpenCML.g4";
}

const std::vector<std::string>& OpenCMLLexer::getRuleNames() const {
  return opencmllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& OpenCMLLexer::getChannelNames() const {
  return opencmllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& OpenCMLLexer::getModeNames() const {
  return opencmllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& OpenCMLLexer::getVocabulary() const {
  return opencmllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView OpenCMLLexer::getSerializedATN() const {
  return opencmllexerLexerStaticData->serializedATN;
}

const atn::ATN& OpenCMLLexer::getATN() const {
  return *opencmllexerLexerStaticData->atn;
}




void OpenCMLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  opencmllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(opencmllexerLexerOnceFlag, opencmllexerLexerInitialize);
#endif
}
