type test1 = Set<Map<String, { a: Number, b: Tuple<Number, List, > } & { c: Any }> > | (Vector<Number, 5> | Tensor<Number, [5, 5]>);
type test2 = (Array<String> | Union<Int, String>[])[];

# 函子定义，修饰符顺序
sync static func if(condition: Bool) {
    return ifexpr(condition, exec, skip<skip>)
};

# 换行测试
with <capture: Any, condition: Functor, update: Functor>
sync func test(target: Functor) {
    return ifexpr(condition<capture>(), {
        exec<{
            update<capture>();
            test<capture, condition, update>(target);
        }>(target);
    }, null)
};

with <capture: Any, condition: Functor, update: Functor>
sync func test(target: Functor) {
    return ifexpr(condition<capture>(), 
    {
        exec<
        {
            update<capture>();
            test<capture, condition, update>(target)
        }>(target);
    }, null)
};

# 单语句匿名函子/单双引号测试
sync func placeComponents(
    startIndex: Number, count: Number,
    dist: Point, pos: Point
): Void {
    let i = startIndex;
    for (i, {i < startIndex + count}, {i ++}) {
        # create instance of LaserCW and place it
        let laser = LaserCW @[pos["x"], pos["y"]];
        let laserRect = laser["meta"]["rect"];
        # create instance of Analyzer and place it
        let analyzer = Analyzer @[pos["x"] + dist["x"] + laserRect["width"], pos["y"]];
        # connect laser to analyzer;
        laser()->analyzer;
        # move to next position
        pos["y"] += pos["y"] + dist["y"] + laserRect["height"];
    }
}