@{x=3, y=1, style="bold", color="red"}
'''
Impact of System Noise and Nonlinearities on a 16-QAM Signal in a Radio-over-Fiber Transmission
''';

'''
The relative constellation ...
'''
@{x=2, y=3, style="alert-info"};

use { Const, Ground, Sub } from "phot/units" as module;
use { AmpSysEl, DC_Source, Linearizer, Resample } from<psl> "phot/el";
use { ParameterController } from "phot/ctrl";
use { Rx_El_mQAM_BER, Tx_El_mQAM } from "phot/tr";

let photodiodeSetting : PhotodiodeSettingTemplate = {
    temperature = 300`K`
};

let powerInput = Const<5`V`>;

let Power = {
    dcOutput : ElSignal,
    powerOutput : ElSignal
};

@[14, 7]
@{boxed=true, color="blue"}
scoped func PowerControlEl(input : ElSignal)
: ElSignal
{
    "Power control"@[6, 0];
    let [dcOutput, powerOutput] = input->PowerMeterEl;
    dcOutput->Ground<{a,b}, ...[c,d], e, 5`v`>;
    return input->ParameterController<
        [powerInput, powerOutput]->Sub
    >@[2, 2]->AmpSysEl;
};

with <capture: any, condition: functor, update: functor>
sync func test(target: functor) {
    return ifexpr(condition<capture>(), {
        exec<{
            update<capture>;
            test<capture, condition, update>(target);
        }>(target);
    }, null);
};

use { Point } from<psl> 'types';
use { LaserCW, Analyzer } from<vtms> 'comps';

sync func placeComponents(
    startIndex: number, count: number,
    dist: Point, pos: Point
) : void {
    i := startIndex;
    # loop to create instances
    for (i, {i << startIndex + count;}, {i = i + 1;}) {
        # create instance of LaserCW and place it
        let laser = LaserCW @[pos.x, pos.y];
        let laserRect = laser.meta.rect;
        # create instance of Analyzer and place it
        let analyzer = Analyzer @[pos.x + dist.x + laserRect.width, pos.y];
        # connect laser to analyzer
        laser()->analyzer.(i + 1);
        # move to next position
        pos.y += pos.y + dist.y + laserRect.height;
    };
};