/**
 * Copyright (c) 2022 Beijing Jiaotong University
 * PhotLab is licensed under [Open Source License].
 * You can use this software according to the terms and conditions of the [Open Source License].
 * You may obtain a copy of [Open Source License] at: [https://open.source.license/]
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 *
 * See the [Open Source License] for more details.
 *
 * Author: Zhenjie Wei
 * Created: Sep. 01, 2023
 * Supported by: National Key Research and Development Program of China
 */

/**
 * This CML module will be imported by interpreter automatically,
 * and can be accessed anywhere in any CML script.
 */

# psl, json, phtc, xml, toml

with <loader: functor = psl>
inner sync static func load(path: string) -> any {
    # inner func
};

with <path: string, ftype: string = 'psl'>
inner sync static func save(entity: any) {
    # inner func
};

use from = load;

with <stream: string = 'stdout'>
inner static func print(data: any) {
    # inner func
};

with <diagram: functor = eye>
inner static func analyze(data: any) {
    # inner func
};

inner static func help() {
    # inner func
};

inner static func version() {
    # inner func
};

inner static func about() {
    # inner func
};

inner static func exit() {
    # inner func
};

inner static func map() {
    # inner func
};

inner static func reduce() {
    # inner func
};

inner static sync func ifexpr(
    condition: bool,
    trueValue: any,
    falseValue: any
) {
    # return trueValue if condition is true, otherwise return falseValue
};

with <after: functor>
inner sync func exec(block: functor) -> void {
    # execute the following block synchronously
    # if after is specified, run it after execution of block
};

with <after: functor>
inner static sync func skip(entity: any) -> void {
    # skip an entity in an entity chain
};

use else = skip;

static sync func if(condition: bool) {
    return ifexpr(condition, exec, skip<skip>)
};

with <capture: any, condition: functor, update: functor>
sync func test(target: functor) {
    return ifexpr(condition<capture>(), {
        exec<{
            update<capture>
            test<capture, condition, update>(target)
        }>(target);
    }, null);
};

static sync func while(condition: functor) {
    return test<condition=condition>
};

static sync func for(
    capture: any,
    condition: functor,
    update: functor
) {
    return test<capture, condition, update>
};

with <f: functor>
inner func map(entity: any) {
    # apply f to each element in entity
};

with <f: functor>
inner func foreach(entity: any) {
    # for each element in entity, apply f to it
};

inner func plus(lhs: any, rhs: any) -> any {
    # return lhs + rhs
};

inner func minus(lhs: any, rhs: any) -> any {
    # return lhs - rhs
};

inner func leq(lhs: any, rhs: any) -> bool {
    # return lhs <= rhs
};